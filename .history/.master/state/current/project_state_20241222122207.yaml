version: 0.1.1
last_updated: '2024-01-24'

project:
  name: cursor-chronicle
  description: Integration of cursor-chat-browser and local-history with enhanced context tracking
  status: active
  phase: integration_planning
  workspace_mappings:
    master_planning:
      path: .master/
      purpose: Central project coordination and state management
    research:
      path: .master/research/
      purpose: Technical research and analysis documents
    docs:
      path: docs/
      purpose: User-facing documentation and guides

upstream_dependencies:
  cursor-chat-browser:
    repository: https://github.com/thomas-pedersen/cursor-chat-browser
    version: latest
    last_sync: null
    integration_status: planning
    integration_priority: high
  local-history:
    repository: https://github.com/zabel-xyz/local-history
    version: latest
    last_sync: null
    integration_status: planning
    integration_priority: high

technical_decisions:
  TD001:
    title: Repository Structure
    date: '2024-01-24'
    status: accepted
    context: Need to organize integration of two upstream repositories
    decision: |
      Adopt monorepo structure with clean forks as submodules:
      - packages/
        - bridge/
        - cursor-chat-browser/
        - local-history/
    rationale: |
      - Enables clean upstream syncs
      - Maintains separation of concerns
      - Facilitates unified development workflow
    consequences:
      positive:
        - Clear dependency management
        - Isolated feature development
        - Easy upstream updates
      negative:
        - More complex initial setup
        - Larger repository size
    alternatives_considered:
      - Single repository fork
      - Separate repositories with npm dependencies
    implementation_status: in_progress
    linked_documents:
      - docs/BRIDGE_ARCHITECTURE.md
      - docs/BRIDGE_IMPLEMENTATION_PLAN.md

  TD002:
    title: Integration Strategy
    date: '2024-01-24'
    status: proposed
    context: Need to determine how to integrate local-history into cursor-chat-browser UI
    decision: |
      Use API-first approach with React Portal integration:
      1. Create API layer for local-history
      2. Inject UI components via React Portal
      3. Maintain shared state management
    rationale: |
      - Minimizes changes to cursor-chat-browser
      - Enables progressive enhancement
      - Maintains clean separation
    consequences:
      positive:
        - Flexible integration points
        - Independent development
        - Clear boundaries
      negative:
        - Some performance overhead
        - More complex state management
    alternatives_considered:
      - Full UI replacement
      - Iframe integration
      - Shadow DOM approach
    implementation_status: planning
    linked_documents:
      - docs/UI_INTEGRATION_DEBATE.md
      - docs/UI_INTEGRATION_DEBATE_HUMAN.md
      - docs/INTEGRATION_ANALYSIS.md

  TD003:
    title: Documentation and State Management
    date: '2024-01-24'
    status: active
    context: Need standardized approach for documentation and state tracking
    decision: |
      Centralize state management and documentation standards:
      1. Use .master/state for project state
      2. Maintain documentation standards in central location
      3. Link all technical decisions to implementation docs
    rationale: |
      - Ensures consistent documentation
      - Maintains clear project state
      - Facilitates decision tracking
    consequences:
      positive:
        - Clear documentation standards
        - Traceable decisions
        - Maintainable state
      negative:
        - Additional overhead in doc maintenance
    implementation_status: active
    linked_documents:
      - docs/DOCUMENTATION_STANDARDS.md
      - docs/COMPENDIUM.md

documentation_standards:
  version: 1.0.0
  last_updated: '2024-01-24'
  principles:
    - Technical precision with concrete examples
    - Multiple implementation approaches
    - Clear rationale and tradeoffs
    - Actionable steps and validation
  
  required_sections:
    technical_docs:
      - Overview with diagrams
      - Implementation options
      - Decision matrix
      - Integration points
      - Validation steps
    
    architecture_decisions:
      - Context
      - Decision
      - Rationale
      - Consequences
      - Alternatives
    
    integration_guides:
      - Prerequisites
      - Step-by-step instructions
      - Configuration examples
      - Validation steps
      - Troubleshooting

research_structure:
  base_path: .master/research
  categories:
    architecture:
      path: architecture/
      description: System design and patterns
      active_research:
        - integration_patterns
        - state_management
    integration:
      path: integration/
      description: Integration approaches and patterns
      active_research:
        - ui_integration
        - api_design
    performance:
      path: performance/
      description: Performance analysis and optimization
      active_research:
        - state_sync
        - ui_updates
    security:
      path: security/
      description: Security considerations and measures
      active_research:
        - data_isolation
        - update_management

state_management:
  state_files:
    - .master/state/current/project_state.yaml
    - project_state.yaml  # Root level symlink
  sync_frequency: on_change
  validation_rules:
    - All technical decisions must have rationale
    - All documentation must follow standards
    - Research must be properly categorized
    - State files must be in sync
  active_metrics:
    - documentation_coverage
    - decision_implementation_status
    - research_progress
    - integration_status